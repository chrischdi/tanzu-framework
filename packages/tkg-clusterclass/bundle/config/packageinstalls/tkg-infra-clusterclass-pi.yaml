#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:data", "data")

#@ def get_clusterclass_name():

#@ if data.values.clusterclassInfraPackageValues.infraProvider == "aws":
#@   return "tkg-clusterclass-aws"
#@ end
#@ if data.values.clusterclassInfraPackageValues.infraProvider == "docker":
#@   return "tkg-clusterclass-docker"
#@ end
#@ if data.values.clusterclassInfraPackageValues.infraProvider == "azure":
#@   return "tkg-clusterclass-azure"
#@ end
#@ if data.values.clusterclassInfraPackageValues.infraProvider == "vsphere":
#@   return "tkg-clusterclass-vsphere"
#@ end

#@ end

#@ def get_clusterclass_package_name():

#@ if data.values.clusterclassInfraPackageValues.infraProvider == "aws":
#@   return "tkg-clusterclass-aws.tanzu.vmware.com"
#@ end
#@ if data.values.clusterclassInfraPackageValues.infraProvider == "docker":
#@   return "tkg-clusterclass-docker.tanzu.vmware.com"
#@ end
#@ if data.values.clusterclassInfraPackageValues.infraProvider == "azure":
#@   return "tkg-clusterclass-azure.tanzu.vmware.com"
#@ end
#@ if data.values.clusterclassInfraPackageValues.infraProvider == "vsphere":
#@   return "tkg-clusterclass-vsphere.tanzu.vmware.com"
#@ end

#@ end

#@ def get_pod_security_namespace_exemptions():

#@ if data.values.clusterclassInfraPackageValues.infraProvider == "azure":
#@   return "tkg-system,capz-system"
#@ end
#@ return "tkg-system"

#@ end

#@ pod_security_namespace_exemptions = get_pod_security_namespace_exemptions()

---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: #@ get_clusterclass_name()
  namespace: #@ data.values.namespaceForPackageInstallation
  annotations:
    kapp.k14s.io/change-rule.0: "upsert after upserting tkg-infra-clusterclass-packageinstall/serviceaccount"
    kapp.k14s.io/change-rule.1: "delete before deleting tkg-infra-clusterclass-packageinstall/serviceaccount"
    ext.packaging.carvel.dev/ytt-paths-from-secret-name.0: tkg-clusterclass-infra-overlays
  labels:
    tkg.tanzu.vmware.com/package-type: "management"
spec:
  serviceAccountName: tanzu-infra-clusterclass-package-sa
  packageRef:
    refName: #@ get_clusterclass_package_name()
    versionSelection:
      prereleases: {}
      #@ if data.values.clusterclassInfraPackageValues.versionConstraints:
      constraints: #@ data.values.clusterclassInfraPackageValues.versionConstraints
      #@ end
  values:
  - secretRef:
      name: tkg-clusterclass-infra-values

---
apiVersion: v1
kind: Secret
metadata:
  name: tkg-clusterclass-infra-values
  namespace: #@ data.values.namespaceForPackageInstallation
  annotations:
    kapp.k14s.io/change-rule.0: "upsert after upserting tkg-infra-clusterclass-packageinstall/serviceaccount"
    kapp.k14s.io/change-rule.1: "delete before deleting tkg-infra-clusterclass-packageinstall/serviceaccount"
type: Opaque
stringData:
  values.yaml: #@ yaml.encode(data.values.clusterclassInfraPackageValues.configValues)

#@yaml/text-templated-strings
---
apiVersion: v1
kind: Secret
metadata:
  name: tkg-clusterclass-infra-overlays
  namespace: #@ data.values.namespaceForPackageInstallation
  annotations:
    kapp.k14s.io/change-rule.0: "upsert after upserting tkg-infra-clusterclass-packageinstall/serviceaccount"
    kapp.k14s.io/change-rule.1: "delete before deleting tkg-infra-clusterclass-packageinstall/serviceaccount"
type: Opaque
stringData:
  pod-security-overlay.yaml: |
    #@ load("@ytt:overlay", "overlay")
    #@ load("@ytt:data", "data")

    #@overlay/match by=overlay.subset({"kind":"ClusterClass"})
    ---
    apiVersion: cluster.x-k8s.io/v1beta1
    kind: ClusterClass
    spec:
      #@overlay/match missing_ok=True
      variables:
      #@overlay/remove
      #@overlay/match by=overlay.map_key("name"),missing_ok=True
      - name: podSecurityStandard
      #@overlay/append
      - name: podSecurityStandard
        required: false
        schema:
          openAPIV3Schema:
            type: object
            default: {}
            properties:
              deactivated:
                type: boolean
                description: "deactivated disables the patches for Pod Security Standard via AdmissionConfiguration."
              enforce:
                type: string
                enum: ["", "privileged", "baseline", "restricted"]
                description: "enforce sets the level for the enforce PodSecurityConfiguration mode. One of \"\", privileged, baseline, restricted."
                nullable: true
              enforceVersion:
                type: string
                description: "enforceVersion sets the version for the enforce PodSecurityConfiguration mode."
              audit:
                type: string
                enum: ["", "privileged", "baseline", "restricted"]
                description: "audit sets the level for the audit PodSecurityConfiguration mode. One of \"\", privileged, baseline, restricted."
                nullable: true
              auditVersion:
                type: string
                description: "auditVersion sets the version for the audit PodSecurityConfiguration mode."
              warn:
                type: string
                enum: ["", "privileged", "baseline", "restricted"]
                description: "warn sets the level for the warn PodSecurityConfiguration mode. One of \"\", privileged, baseline, restricted."
                nullable: true
              warnVersion:
                type: string
                description: "warnVersion sets the version for the warn PodSecurityConfiguration mode."
              exemptions:
                type: object
                description: "excemption configuration for the PodSecurityConfiguration."
                properties:
                  namespaces:
                    type: array
                    items:
                      type: string
                    description: "namespaces excluded to apply PodSecurityConfiguration Admission."
      #@overlay/match missing_ok=True
      patches:
      #@overlay/remove
      #@overlay/match by=overlay.map_key("name"),missing_ok=True
      - name: podSecurityStandard
      #@overlay/append
      - name: podSecurityStandard
        description: "Adds an admission configuration for PodSecurity to the kube-apiserver."
        definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
          - op: add
            path: "/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/admission-control-config-file"
            value: "/etc/kubernetes/kube-apiserver-admission-pss.yaml"
          - op: add
            path: "/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-"
            value:
              name: admission-pss
              hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
              mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
              readOnly: true
              pathType: "File"
          - op: add
            path: "/spec/template/spec/kubeadmConfigSpec/files/-"
            valueFrom:
              template: |-
                content: |-
                  {{ $namespace_exemptions := "kube-system" }}
                  {{ range ("(@= pod_security_namespace_exemptions @)" | split ",") }}
                    {{ $namespace_exemptions := printf "%s, %q" $namespace_exemptions . }}
                  {{ end }}
                  {{ $defaultWarnAudit := "baseline" }}
                  {{ if .podSecurityStandard.exemptions.namespaces }}
                    {{ range $namespace := .podSecurityStandard.exemptions.namespaces }}
                      {{ $namespace_exemptions = printf "%s, %q" $namespace_exemptions $namespace }}
                    {{ end }}
                  {{ end }}
                  apiVersion: apiserver.config.k8s.io/v1
                  kind: AdmissionConfiguration
                  plugins:
                  - name: PodSecurity
                    configuration:
                      apiVersion: pod-security.admission.config.k8s.io/v1beta1
                      kind: PodSecurityConfiguration
                      defaults:
                        enforce: "{{ if .podSecurityStandard.enforce }}{{ .podSecurityStandard.enforce }}{{ end }}"
                        enforce-version: "{{ if .podSecurityStandard.enforceVersion -}}{{ .podSecurityStandard.enforceVersion }}{{ else }}latest{{- end }}"
                        audit: "{{ if .podSecurityStandard.audit }}{{ .podSecurityStandard.audit }}{{ else }}{{ $defaultWarnAudit }}{{ end }}"
                        audit-version: "{{ if .podSecurityStandard.auditVersion -}}{{ .podSecurityStandard.auditVersion }}{{ else }}latest{{- end }}"
                        warn: "{{ if .podSecurityStandard.warn }}{{ .podSecurityStandard.warn }}{{ else }}{{ $defaultWarnAudit }}{{ end }}"
                        warn-version: "{{ if .podSecurityStandard.warnVersion -}}{{ .podSecurityStandard.warnVersion }}{{ else }}latest{{- end }}"
                      exemptions:
                        usernames: []
                        runtimeClasses: []
                        namespaces: [{{ $namespace_exemptions }}]
                path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
        enabledIf: '{{ and (not .podSecurityStandard.deactivated) (semverCompare ">= v1.24" .builtin.controlPlane.version) }}'
